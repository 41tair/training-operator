// Copyright 2021 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	mpiv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mpi/v1"
	mxnetv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mxnet/v1"
	pytorchv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/pytorch/v1"
	tensorflowv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/tensorflow/v1"
	xgboostv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/xgboost/v1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	MpiV1() mpiv1.MpiV1Interface
	MxnetV1() mxnetv1.MxnetV1Interface
	PytorchV1() pytorchv1.PytorchV1Interface
	TensorflowV1() tensorflowv1.TensorflowV1Interface
	XgboostV1() xgboostv1.XgboostV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	mpiV1        *mpiv1.MpiV1Client
	mxnetV1      *mxnetv1.MxnetV1Client
	pytorchV1    *pytorchv1.PytorchV1Client
	tensorflowV1 *tensorflowv1.TensorflowV1Client
	xgboostV1    *xgboostv1.XgboostV1Client
}

// MpiV1 retrieves the MpiV1Client
func (c *Clientset) MpiV1() mpiv1.MpiV1Interface {
	return c.mpiV1
}

// MxnetV1 retrieves the MxnetV1Client
func (c *Clientset) MxnetV1() mxnetv1.MxnetV1Interface {
	return c.mxnetV1
}

// PytorchV1 retrieves the PytorchV1Client
func (c *Clientset) PytorchV1() pytorchv1.PytorchV1Interface {
	return c.pytorchV1
}

// TensorflowV1 retrieves the TensorflowV1Client
func (c *Clientset) TensorflowV1() tensorflowv1.TensorflowV1Interface {
	return c.tensorflowV1
}

// XgboostV1 retrieves the XgboostV1Client
func (c *Clientset) XgboostV1() xgboostv1.XgboostV1Interface {
	return c.xgboostV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.mpiV1, err = mpiv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.mxnetV1, err = mxnetv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pytorchV1, err = pytorchv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tensorflowV1, err = tensorflowv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.xgboostV1, err = xgboostv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.mpiV1 = mpiv1.NewForConfigOrDie(c)
	cs.mxnetV1 = mxnetv1.NewForConfigOrDie(c)
	cs.pytorchV1 = pytorchv1.NewForConfigOrDie(c)
	cs.tensorflowV1 = tensorflowv1.NewForConfigOrDie(c)
	cs.xgboostV1 = xgboostv1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.mpiV1 = mpiv1.New(c)
	cs.mxnetV1 = mxnetv1.New(c)
	cs.pytorchV1 = pytorchv1.New(c)
	cs.tensorflowV1 = tensorflowv1.New(c)
	cs.xgboostV1 = xgboostv1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
