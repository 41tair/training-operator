// Copyright 2021 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/kubeflow/training-operator/pkg/client/clientset/versioned"
	mpiv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mpi/v1"
	fakempiv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mpi/v1/fake"
	mxnetv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mxnet/v1"
	fakemxnetv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/mxnet/v1/fake"
	pytorchv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/pytorch/v1"
	fakepytorchv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/pytorch/v1/fake"
	tensorflowv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/tensorflow/v1"
	faketensorflowv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/tensorflow/v1/fake"
	xgboostv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/xgboost/v1"
	fakexgboostv1 "github.com/kubeflow/training-operator/pkg/client/clientset/versioned/typed/xgboost/v1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// MpiV1 retrieves the MpiV1Client
func (c *Clientset) MpiV1() mpiv1.MpiV1Interface {
	return &fakempiv1.FakeMpiV1{Fake: &c.Fake}
}

// MxnetV1 retrieves the MxnetV1Client
func (c *Clientset) MxnetV1() mxnetv1.MxnetV1Interface {
	return &fakemxnetv1.FakeMxnetV1{Fake: &c.Fake}
}

// PytorchV1 retrieves the PytorchV1Client
func (c *Clientset) PytorchV1() pytorchv1.PytorchV1Interface {
	return &fakepytorchv1.FakePytorchV1{Fake: &c.Fake}
}

// TensorflowV1 retrieves the TensorflowV1Client
func (c *Clientset) TensorflowV1() tensorflowv1.TensorflowV1Interface {
	return &faketensorflowv1.FakeTensorflowV1{Fake: &c.Fake}
}

// XgboostV1 retrieves the XgboostV1Client
func (c *Clientset) XgboostV1() xgboostv1.XgboostV1Interface {
	return &fakexgboostv1.FakeXgboostV1{Fake: &c.Fake}
}
